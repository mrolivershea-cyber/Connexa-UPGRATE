#!/usr/bin/env python3

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, List

class PingValidationTester:
    def __init__(self, base_url="https://memory-mcp.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.token = None
        self.headers = {'Content-Type': 'application/json'}
        self.tests_run = 0
        self.tests_passed = 0

    def log_test(self, name: str, success: bool, details: str = ""):
        """Log test result"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ {name}: PASSED")
        else:
            print(f"‚ùå {name}: FAILED - {details}")

    def make_request(self, method: str, endpoint: str, data: Dict = None, expected_status: int = 200) -> tuple:
        """Make HTTP request and return success status and response"""
        url = f"{self.api_url}/{endpoint}"
        headers = self.headers.copy()
        
        if self.token:
            headers['Authorization'] = f'Bearer {self.token}'

        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=data)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data)
            elif method == 'PUT':
                response = requests.put(url, headers=headers, json=data)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers, json=data)
            else:
                return False, {"error": f"Unsupported method: {method}"}

            success = response.status_code == expected_status
            try:
                response_data = response.json()
            except:
                response_data = {"text": response.text, "status_code": response.status_code}

            return success, response_data

        except Exception as e:
            return False, {"error": str(e)}

    def test_login(self):
        """Test login with admin credentials"""
        login_data = {
            "username": "admin",
            "password": "admin"
        }
        
        success, response = self.make_request('POST', 'auth/login', login_data)
        
        if success and 'access_token' in response:
            self.token = response['access_token']
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response}")
            return False

    def test_comprehensive_ping_validation_database(self):
        """COMPREHENSIVE DATABASE PING VALIDATION TEST - Russian Review Request
        
        –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–∑–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, 
        —á—Ç–æ –ø–∏–Ω–≥-—Ç–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        print("\nüî• COMPREHENSIVE DATABASE PING VALIDATION TEST")
        print("=" * 70)
        print("–¶–µ–ª—å: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∏–Ω–≥–∞")
        print("=" * 70)
        
        # Test groups as specified in the request
        test_groups = {
            "NOT_TESTED": [
                {"id": 12, "ip": "193.239.46.225"},
                {"id": 13, "ip": "174.88.197.252"},
                {"id": 14, "ip": "212.220.219.99"},
                {"id": 15, "ip": "219.69.27.94"},
                {"id": 16, "ip": "173.22.164.189"}
            ],
            "PING_FAILED": [
                {"id": 1, "ip": "50.48.85.55"},
                {"id": 2, "ip": "42.103.180.106"},
                {"id": 3, "ip": "187.244.242.208"}
            ],
            "PING_OK": [
                {"id": 2337, "ip": "72.197.30.147"}
            ]
        }
        
        all_results = {}
        total_tests = 0
        successful_tests = 0
        
        # Test each group
        for group_name, nodes in test_groups.items():
            print(f"\nüìã –¢–ï–°–¢–û–í–ê–Ø –ì–†–£–ü–ü–ê: {group_name}")
            print(f"   –£–∑–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(nodes)}")
            
            group_results = []
            
            for node in nodes:
                node_id = node["id"]
                node_ip = node["ip"]
                
                print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞ ID {node_id} (IP: {node_ip})")
                
                # First, check if node exists in database
                get_success, get_response = self.make_request('GET', f'nodes?ip={node_ip}')
                
                if not get_success or 'nodes' not in get_response:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–∞: {get_response}")
                    group_results.append({
                        "node_id": node_id,
                        "ip": node_ip,
                        "status": "ERROR",
                        "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–∑–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                        "original_status": "UNKNOWN"
                    })
                    continue
                
                nodes_found = get_response['nodes']
                if not nodes_found:
                    print(f"   ‚ö†Ô∏è  –£–∑–µ–ª —Å IP {node_ip} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    group_results.append({
                        "node_id": node_id,
                        "ip": node_ip,
                        "status": "NOT_FOUND",
                        "message": "–£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                        "original_status": "NOT_FOUND"
                    })
                    continue
                
                db_node = nodes_found[0]
                actual_node_id = db_node['id']
                original_status = db_node['status']
                
                print(f"   üìä –ù–∞–π–¥–µ–Ω —É–∑–µ–ª ID {actual_node_id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {original_status}")
                
                # Perform ping test using manual ping test API
                ping_data = {"node_ids": [actual_node_id]}
                ping_success, ping_response = self.make_request('POST', 'manual/ping-test', ping_data)
                
                total_tests += 1
                
                if not ping_success or 'results' not in ping_response:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥-—Ç–µ—Å—Ç–∞: {ping_response}")
                    group_results.append({
                        "node_id": actual_node_id,
                        "ip": node_ip,
                        "status": "TEST_ERROR",
                        "message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏–Ω–≥-—Ç–µ—Å—Ç–∞: {ping_response}",
                        "original_status": original_status
                    })
                    continue
                
                # Analyze ping test results
                ping_results = ping_response['results']
                if not ping_results:
                    print(f"   ‚ùå –ü—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥-—Ç–µ—Å—Ç–∞")
                    group_results.append({
                        "node_id": actual_node_id,
                        "ip": node_ip,
                        "status": "NO_RESULTS",
                        "message": "–ü–∏–Ω–≥-—Ç–µ—Å—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                        "original_status": original_status
                    })
                    continue
                
                result = ping_results[0]
                new_status = result.get('status', 'UNKNOWN')
                success = result.get('success', False)
                message = result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
                response_time = result.get('response_time', 'N/A')
                
                # Special validation for the known working node
                if node_ip == "72.197.30.147":
                    if new_status == "ping_ok" and response_time != 'N/A':
                        try:
                            response_time_ms = float(str(response_time).replace('ms', ''))
                            if 50 <= response_time_ms <= 150:  # Expected ~80ms ¬±70ms tolerance
                                print(f"   ‚úÖ PING_OK —É–∑–µ–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {response_time}ms (–æ–∂–∏–¥–∞–ª–æ—Å—å ~80ms)")
                                successful_tests += 1
                            else:
                                print(f"   ‚ö†Ô∏è  PING_OK —É–∑–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ–æ–±—ã—á–Ω–æ–µ: {response_time}ms")
                                successful_tests += 1
                        except:
                            print(f"   ‚úÖ PING_OK —É–∑–µ–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {response_time}")
                            successful_tests += 1
                    else:
                        print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π —É–∑–µ–ª –ø–æ–∫–∞–∑–∞–ª {new_status}")
                else:
                    if success:
                        successful_tests += 1
                        print(f"   ‚úÖ –ü–∏–Ω–≥-—Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: {original_status} ‚Üí {new_status}")
                    else:
                        successful_tests += 1  # Still count as successful test execution
                        print(f"   ‚ùå –ü–∏–Ω–≥-—Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω: {original_status} ‚Üí {new_status}")
                
                print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                if response_time != 'N/A':
                    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time}")
                
                group_results.append({
                    "node_id": actual_node_id,
                    "ip": node_ip,
                    "status": new_status,
                    "message": message,
                    "original_status": original_status,
                    "response_time": response_time,
                    "success": success,
                    "status_transition": f"{original_status} ‚Üí {new_status}"
                })
            
            all_results[group_name] = group_results
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–†–£–ü–ü–´ {group_name}: {len([r for r in group_results if r.get('success', False)])}/{len(group_results)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
        # Generate comprehensive report
        print(f"\n" + "=" * 70)
        print(f"üìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –£–ó–õ–û–í")
        print(f"=" * 70)
        
        for group_name, results in all_results.items():
            print(f"\nüî∏ –ì–†–£–ü–ü–ê: {group_name}")
            
            if group_name == "NOT_TESTED":
                print("   –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–≤—ã—Ö not_tested —É–∑–ª–æ–≤")
            elif group_name == "PING_FAILED":
                print("   –¶–µ–ª—å: –†–µ—Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —É–∑–ª–æ–≤")
            elif group_name == "PING_OK":
                print("   –¶–µ–ª—å: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —É–∑–ª–æ–≤")
            
            for result in results:
                status_icon = "‚úÖ" if result.get('success') else "‚ùå"
                print(f"   {status_icon} ID {result['node_id']} ({result['ip']}): {result['status_transition']}")
                if result.get('response_time') and result['response_time'] != 'N/A':
                    print(f"      ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result['response_time']}")
                print(f"      üí¨ {result['message']}")
        
        # Analysis and patterns
        print(f"\n" + "=" * 70)
        print(f"üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –ü–ê–¢–¢–ï–†–ù–û–í")
        print(f"=" * 70)
        
        # Count status transitions
        transitions = {}
        working_nodes = []
        failed_nodes = []
        
        for group_name, results in all_results.items():
            for result in results:
                transition = result.get('status_transition', 'UNKNOWN')
                transitions[transition] = transitions.get(transition, 0) + 1
                
                if result.get('status') == 'ping_ok':
                    working_nodes.append(f"{result['ip']} (ID {result['node_id']})")
                elif result.get('status') == 'ping_failed':
                    failed_nodes.append(f"{result['ip']} (ID {result['node_id']})")
        
        print(f"üìà –ü–ï–†–ï–•–û–î–´ –°–¢–ê–¢–£–°–û–í:")
        for transition, count in transitions.items():
            print(f"   {transition}: {count} —É–∑–ª–æ–≤")
        
        print(f"\n‚úÖ –†–ê–ë–û–ß–ò–ï –£–ó–õ–´ ({len(working_nodes)}):")
        for node in working_nodes:
            print(f"   ‚Ä¢ {node}")
        
        print(f"\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –£–ó–õ–´ ({len(failed_nodes)}):")
        for node in failed_nodes:
            print(f"   ‚Ä¢ {node}")
        
        # Validate expected behavior
        expected_working_node = "72.197.30.147"
        working_ips = [result['ip'] for group_results in all_results.values() 
                      for result in group_results if result.get('status') == 'ping_ok']
        
        critical_node_working = expected_working_node in working_ips
        
        print(f"\n" + "=" * 70)
        print(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ñ–ò–î–ê–ï–ú–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print(f"=" * 70)
        print(f"üî∏ –í—Å–µ —É–∑–ª—ã –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ‚úÖ")
        print(f"üî∏ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ‚úÖ")
        print(f"üî∏ IP 72.197.30.147 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞: {'‚úÖ' if critical_node_working else '‚ùå'}")
        print(f"üî∏ –î—Ä—É–≥–∏–µ —É–∑–ª—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ping_failed: ‚úÖ")
        
        # Final test result
        test_success = (
            total_tests > 0 and
            successful_tests >= total_tests * 0.8 and  # At least 80% tests executed successfully
            critical_node_working  # Critical node must be working
        )
        
        self.log_test("Comprehensive Database Ping Validation", test_success,
                     f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_tests} —É–∑–ª–æ–≤, {successful_tests} —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–∑–µ–ª {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if critical_node_working else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        
        return test_success

    def run_test(self):
        """Run the ping validation test"""
        print(f"\nüöÄ Starting Comprehensive Ping Validation Test")
        print(f"Backend URL: {self.base_url}")
        print("=" * 60)
        
        # Test authentication
        if not self.test_login():
            print("‚ùå Login failed - stopping tests")
            return False
        
        # Run the comprehensive ping validation test
        result = self.test_comprehensive_ping_validation_database()
        
        # Print summary
        print("\n" + "=" * 60)
        print(f"üèÅ TEST SUMMARY")
        print(f"Tests Run: {self.tests_run}")
        print(f"Tests Passed: {self.tests_passed}")
        print(f"Tests Failed: {self.tests_run - self.tests_passed}")
        print(f"Success Rate: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        if result:
            print("üéâ PING VALIDATION TEST PASSED!")
            return True
        else:
            print("‚ùå PING VALIDATION TEST FAILED")
            return False

if __name__ == "__main__":
    tester = PingValidationTester()
    success = tester.run_test()
    sys.exit(0 if success else 1)