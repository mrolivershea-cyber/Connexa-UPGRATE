#!/usr/bin/env python3
"""
TEST PARSING REAL PPTP.txt FILE - 6419 nodes
"""
import sys
sys.path.insert(0, '/app/backend')

from server import parse_nodes_text
import time

print("=" * 100)
print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê PPTP.txt")
print("=" * 100)

# Load file
with open('/app/PPTP_test.txt', 'r', encoding='utf-8') as f:
    file_content = f.read()

print(f"\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_content):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(file_content)/1024:.1f} KB)")
print(f"üìä –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {file_content.count(chr(10)):,}")

# Parse
print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
start_time = time.time()

try:
    result = parse_nodes_text(file_content)
    
    parse_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"\n{'='*100}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê")
    print(f"{'='*100}")
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {result['successfully_parsed']} —É–∑–ª–æ–≤")
    print(f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: {result['total_processed']}")
    print(f"‚ùå –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {len(result['format_errors'])}")
    print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã: {len(result['duplicates'])}")
    
    # Analyze parsed nodes
    if result['nodes']:
        print(f"\n{'='*100}")
        print("üîç –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 5 –£–ó–õ–û–í")
        print(f"{'='*100}")
        
        for i, node in enumerate(result['nodes'][:5], 1):
            print(f"\n--- –£–∑–µ–ª {i} ---")
            print(f"  IP: {node.get('ip')}")
            print(f"  Login: {node.get('login')}")
            print(f"  Password: {node.get('password')}")
            print(f"  Country: {node.get('country', 'NOT SET')}")
            print(f"  State: {node.get('state', 'NOT SET')}")
            print(f"  City: {node.get('city', 'NOT SET')}")
            print(f"  ZIP: {node.get('zipcode', 'NOT SET')}")
            print(f"  Scam Fraud Score: {node.get('scamalytics_fraud_score', 'NOT SET')}")
            print(f"  Scam Risk: {node.get('scamalytics_risk', 'NOT SET')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Scamalytics –¥–∞–Ω–Ω—ã–º
        print(f"\n{'='*100}")
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SCAMALYTICS")
        print(f"{'='*100}")
        
        nodes_with_scam = sum(1 for n in result['nodes'] if n.get('scamalytics_fraud_score') is not None)
        nodes_with_risk = sum(1 for n in result['nodes'] if n.get('scamalytics_risk') is not None)
        
        print(f"\n‚úÖ –£–∑–ª–æ–≤ —Å Fraud Score: {nodes_with_scam}/{len(result['nodes'])} ({nodes_with_scam/len(result['nodes'])*100:.1f}%)")
        print(f"‚úÖ –£–∑–ª–æ–≤ —Å Risk Level: {nodes_with_risk}/{len(result['nodes'])} ({nodes_with_risk/len(result['nodes'])*100:.1f}%)")
        
        if nodes_with_scam > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ risk levels
            risk_levels = {}
            for node in result['nodes']:
                risk = node.get('scamalytics_risk')
                if risk:
                    risk_levels[risk] = risk_levels.get(risk, 0) + 1
            
            print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞:")
            for risk, count in sorted(risk_levels.items()):
                print(f"  {risk.upper()}: {count} —É–∑–ª–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Location
        print(f"\n{'='*100}")
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê LOCATION")
        print(f"{'='*100}")
        
        nodes_with_country = sum(1 for n in result['nodes'] if n.get('country'))
        nodes_with_state = sum(1 for n in result['nodes'] if n.get('state'))
        nodes_with_city = sum(1 for n in result['nodes'] if n.get('city'))
        
        print(f"\n‚úÖ –£–∑–ª–æ–≤ —Å Country: {nodes_with_country}/{len(result['nodes'])} ({nodes_with_country/len(result['nodes'])*100:.1f}%)")
        print(f"‚úÖ –£–∑–ª–æ–≤ —Å State: {nodes_with_state}/{len(result['nodes'])} ({nodes_with_state/len(result['nodes'])*100:.1f}%)")
        print(f"‚úÖ –£–∑–ª–æ–≤ —Å City: {nodes_with_city}/{len(result['nodes'])} ({nodes_with_city/len(result['nodes'])*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Location
        print(f"\nüîç –ü–†–ò–ú–ï–†–´ –ù–û–í–´–• –§–û–†–ú–ê–¢–û–í LOCATION:")
        count = 0
        for node in result['nodes']:
            if node.get('country') and ',' in str(node.get('city', '')):
                print(f"\n  IP: {node.get('ip')}")
                print(f"  Country: {node.get('country')}")
                print(f"  State: {node.get('state')}")
                print(f"  City: {node.get('city')}")
                count += 1
                if count >= 3:
                    break
    
    # –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    if result['format_errors']:
        print(f"\n{'='*100}")
        print(f"‚ùå –û–®–ò–ë–ö–ò –§–û–†–ú–ê–¢–ê (–ø–µ—Ä–≤—ã–µ 10)")
        print(f"{'='*100}")
        for error in result['format_errors'][:10]:
            print(f"  - {error}")
    
    # Final verdict
    print(f"\n{'='*100}")
    print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print(f"{'='*100}")
    
    success_rate = (result['successfully_parsed'] / result['total_processed'] * 100) if result['total_processed'] > 0 else 0
    
    print(f"\nüìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    print(f"‚è±Ô∏è  –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞: {result['successfully_parsed']/parse_time:.0f} —É–∑–ª–æ–≤/—Å–µ–∫")
    
    if success_rate >= 95:
        print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {success_rate:.1f}%")
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ù–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ Scamalytics –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Location (US (State, City)) –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif success_rate >= 80:
        print(f"\n‚ö†Ô∏è  –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {success_rate:.1f}% —É—Å–ø–µ—Ö–∞")
        print(f"‚ùå –ù–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {result['total_processed'] - result['successfully_parsed']} –±–ª–æ–∫–æ–≤")
    else:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ü–ê–†–°–ò–ù–ì–û–ú: —Ç–æ–ª—å–∫–æ {success_rate:.1f}% —É—Å–ø–µ—Ö–∞")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞")

except Exception as e:
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–ê–†–°–ò–ù–ì–ï: {str(e)}")
    import traceback
    traceback.print_exc()
