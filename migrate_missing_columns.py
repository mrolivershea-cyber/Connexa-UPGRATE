#!/usr/bin/env python3
"""
Migration: Add missing columns to nodes table
"""
import sqlite3
import sys

DB_PATH = "/app/backend/connexa.db"

print("=" * 100)
print("üîß DATABASE MIGRATION - Adding missing columns")
print("=" * 100)

try:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Get existing columns
    cursor.execute("PRAGMA table_info(nodes)")
    existing_columns = [row[1] for row in cursor.fetchall()]
    
    print(f"\nüìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫: {len(existing_columns)}")
    
    # Columns to add
    columns_to_add = [
        ("previous_status", "VARCHAR(20)"),
        ("ppp_interface", "VARCHAR(20)"),
    ]
    
    added_count = 0
    
    for col_name, col_type in columns_to_add:
        if col_name not in existing_columns:
            print(f"\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {col_name} ({col_type})")
            try:
                cursor.execute(f"ALTER TABLE nodes ADD COLUMN {col_name} {col_type}")
                added_count += 1
                print(f"   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    print(f"   ‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    conn.commit()
    
    # Verify
    cursor.execute("PRAGMA table_info(nodes)")
    final_columns = [row[1] for row in cursor.fetchall()]
    
    print(f"\n{'='*100}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*100}")
    print(f"\n‚úÖ –ë—ã–ª–æ –∫–æ–ª–æ–Ω–æ–∫: {len(existing_columns)}")
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
    print(f"‚úÖ –°—Ç–∞–ª–æ –∫–æ–ª–æ–Ω–æ–∫: {len(final_columns)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_cols = ['scamalytics_fraud_score', 'scamalytics_risk', 'previous_status', 'ppp_interface']
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
    for col in required_cols:
        status = "‚úÖ" if col in final_columns else "‚ùå"
        print(f"  {status} {col}")
    
    conn.close()
    
    print(f"\n{'='*100}")
    print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"{'='*100}")
    
except Exception as e:
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
