#!/usr/bin/env python3
"""
Comprehensive Location parsing test - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
"""
import sys
sys.path.insert(0, '/app/backend')

from server import parse_nodes_text

# Test cases –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Location
test_cases = [
    {
        "name": "Format 1: Country (State, City) - —Å –∑–∞–ø—è—Ç–æ–π",
        "data": """
IP: 192.168.1.1
Credentials: admin:pass
Location: US (Washington, Mill Creek)
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 2: Country (State. City) - —Å —Ç–æ—á–∫–æ–π",
        "data": """
IP: 192.168.1.2
Credentials: admin:pass
Location: US (Washington. Mill Creek)
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 3: Country (State: City) - —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º",
        "data": """
IP: 192.168.1.3
Credentials: admin:pass
Location: US (Washington: Mill Creek)
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 4: State (City) - –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã",
        "data": """
IP: 192.168.1.4
Credentials: admin:pass
Location: Texas (Austin)
ZIP: 78701
""",
        "expected": {"country": None, "state": "Texas", "city": "Austin"}
    },
    {
        "name": "Format 5: Country, State, City - –∑–∞–ø—è—Ç—ã–µ –±–µ–∑ —Å–∫–æ–±–æ–∫",
        "data": """
IP: 192.168.1.5
Credentials: admin:pass
Location: US, Washington, Mill Creek
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 6: State, City - –∑–∞–ø—è—Ç—ã–µ –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã",
        "data": """
IP: 192.168.1.6
Credentials: admin:pass
Location: Washington, Mill Creek
ZIP: 98012
""",
        "expected": {"country": None, "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 7: Country State City - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã",
        "data": """
IP: 192.168.1.7
Credentials: admin:pass
Location: US Washington Mill Creek
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 8: State City - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã",
        "data": """
IP: 192.168.1.8
Credentials: admin:pass
Location: Washington Mill Creek
ZIP: 98012
""",
        "expected": {"country": None, "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 9: Country. State. City - —Ç–æ—á–∫–∏",
        "data": """
IP: 192.168.1.9
Credentials: admin:pass
Location: US. Washington. Mill Creek
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 10: Country (State  City) - –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–±–µ–ª",
        "data": """
IP: 192.168.1.10
Credentials: admin:pass
Location: US (Washington  Mill Creek)
ZIP: 98012
""",
        "expected": {"country": "US", "state": "Washington", "city": "Mill Creek"}
    },
    {
        "name": "Format 11: Multi-word city - Kansas City",
        "data": """
IP: 192.168.1.11
Credentials: admin:pass
Location: US (Missouri, Kansas City)
ZIP: 64101
""",
        "expected": {"country": "US", "state": "Missouri", "city": "Kansas City"}
    },
    {
        "name": "Format 12: Multi-word state - New York City",
        "data": """
IP: 192.168.1.12
Credentials: admin:pass
Location: US, New York, New York City
ZIP: 10001
""",
        "expected": {"country": "US", "state": "New York", "city": "New York City"}
    }
]

print("=" * 100)
print("COMPREHENSIVE LOCATION PARSING TEST - –í–°–ï –í–ê–†–ò–ê–¶–ò–ò")
print("=" * 100)

passed = 0
failed = 0

for i, test in enumerate(test_cases, 1):
    print(f"\n{'='*100}")
    print(f"TEST {i}: {test['name']}")
    print(f"{'='*100}")
    
    result = parse_nodes_text(test['data'])
    
    if result['nodes'] and len(result['nodes']) > 0:
        node = result['nodes'][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        country_match = node.get('country') == test['expected']['country']
        state_match = node.get('state') == test['expected']['state']
        city_match = node.get('city') == test['expected']['city']
        
        all_match = country_match and state_match and city_match
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìç –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test['data'].strip().split('Location:')[1].split('ZIP:')[0].strip()}")
        print(f"\nüìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  Country: {test['expected']['country']}")
        print(f"  State:   {test['expected']['state']}")
        print(f"  City:    {test['expected']['city']}")
        
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  Country: {node.get('country')} {'‚úÖ' if country_match else '‚ùå'}")
        print(f"  State:   {node.get('state')} {'‚úÖ' if state_match else '‚ùå'}")
        print(f"  City:    {node.get('city')} {'‚úÖ' if city_match else '‚ùå'}")
        
        if all_match:
            print(f"\n‚úÖ TEST {i}: PASSED")
            passed += 1
        else:
            print(f"\n‚ùå TEST {i}: FAILED")
            failed += 1
    else:
        print(f"‚ùå TEST {i}: FAILED - No nodes parsed")
        failed += 1

# Summary
print(f"\n{'='*100}")
print("FINAL SUMMARY")
print(f"{'='*100}")
print(f"\n‚úÖ PASSED: {passed}/{len(test_cases)} tests")
print(f"‚ùå FAILED: {failed}/{len(test_cases)} tests")
print(f"\nüìä Success Rate: {(passed/len(test_cases)*100):.1f}%")

if passed == len(test_cases):
    print("\nüéâ ALL LOCATION PARSING TESTS PASSED!")
    print("‚úÖ –ü–∞—Ä—Å–µ—Ä Location –≥–æ—Ç–æ–≤ –∫ –ª—é–±—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ñ–æ—Ä–º–∞—Ç–∞!")
    print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å: —Å–∫–æ–±–∫–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏, —Ç–æ—á–∫–∞–º–∏, –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏, –ø—Ä–æ–±–µ–ª–∞–º–∏")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Country (State, City), State (City), State City, –∏ –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")
else:
    print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
