#!/usr/bin/env python3
"""
FULL IMPORT TEST - Import PPTP.txt through API
"""
import requests
import time
import json

API = "http://localhost:8001/api"

print("=" * 100)
print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –ß–ï–†–ï–ó API")
print("=" * 100)

# Login first
print("\n1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
login_response = requests.post(f"{API}/auth/login", json={
    "username": "admin",
    "password": "admin"
})

if login_response.status_code != 200:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
    exit(1)

token = login_response.json()['access_token']
headers = {"Authorization": f"Bearer {token}"}
print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

# Get current stats
print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
stats_before = requests.get(f"{API}/stats", headers=headers).json()
print(f"üìä –£–∑–ª–æ–≤ –≤ –±–∞–∑–µ –¥–æ –∏–º–ø–æ—Ä—Ç–∞: {stats_before['total']}")

# Load file
print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ PPTP.txt...")
with open('/app/PPTP_test.txt', 'r', encoding='utf-8') as f:
    file_content = f.read()

file_size_kb = len(file_content) / 1024
print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_kb:.1f} KB")

# Import
print(f"\n4Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...")
print(f"   (–§–∞–π–ª > 500KB, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω chunked import)")

start_time = time.time()

import_response = requests.post(
    f"{API}/nodes/import",
    headers=headers,
    json={"data": file_content, "protocol": "pptp"}
)

if import_response.status_code != 200:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {import_response.status_code}")
    print(f"Response: {import_response.text}")
    exit(1)

import_result = import_response.json()
print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

# Check if chunked
if import_result.get('session_id'):
    session_id = import_result['session_id']
    print(f"\nüì¶ Chunked Import - Session ID: {session_id}")
    print(f"üìä –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {import_result.get('total_chunks')}")
    
    # Poll progress
    print(f"\n5Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    last_percent = 0
    
    while True:
        time.sleep(2)
        
        progress_response = requests.get(
            f"{API}/import/progress/{session_id}",
            headers=headers
        )
        
        if progress_response.status_code == 200:
            progress = progress_response.json()
            status = progress.get('status')
            percent = progress.get('progress_percent', 0)
            
            if percent > last_percent:
                print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% ({progress.get('processed_chunks')}/{progress.get('total_chunks')} —á–∞–Ω–∫–æ–≤)")
                print(f"      –î–æ–±–∞–≤–ª–µ–Ω–æ: {progress.get('added')}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {progress.get('skipped')}, –û—à–∏–±–∫–∏: {progress.get('errors')}")
                last_percent = percent
            
            if status in ['completed', 'failed', 'cancelled']:
                print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {status.upper()}")
                final_progress = progress
                break
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
            break
    
    import_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞: {import_time:.1f} —Å–µ–∫—É–Ω–¥")
    
else:
    # Regular import
    print(f"\n‚úÖ Regular Import (–Ω–µ chunked)")
    import_time = time.time() - start_time
    final_progress = import_result.get('report', {})

# Get stats after import
print(f"\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
stats_after = requests.get(f"{API}/stats", headers=headers).json()

print(f"\n{'='*100}")
print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
print(f"{'='*100}")

print(f"\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –î–æ –∏–º–ø–æ—Ä—Ç–∞:  {stats_before['total']} —É–∑–ª–æ–≤")
print(f"  –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: {stats_after['total']} —É–∑–ª–æ–≤")
print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ: {stats_after['total'] - stats_before['total']} —É–∑–ª–æ–≤")

if import_result.get('session_id'):
    print(f"\nüìä –î–µ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç–∞:")
    print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {final_progress.get('added', 0)}")
    print(f"  –î—É–±–ª–∏–∫–∞—Ç—ã (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {final_progress.get('skipped', 0)}")
    print(f"  –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {final_progress.get('errors', 0)}")

print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
print(f"  Not Tested: {stats_after.get('not_tested', 0)}")
print(f"  Ping Failed: {stats_after.get('ping_failed', 0)}")
print(f"  Ping OK: {stats_after.get('ping_ok', 0)}")
print(f"  Speed OK: {stats_after.get('speed_ok', 0)}")
print(f"  Online: {stats_after.get('online', 0)}")

# Verify Scamalytics data in DB
print(f"\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Scamalytics –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...")
nodes_response = requests.get(
    f"{API}/nodes",
    headers=headers,
    params={"limit": 100, "page": 1}
)

if nodes_response.status_code == 200:
    nodes_data = nodes_response.json()
    sample_nodes = nodes_data['nodes'][:5]
    
    scam_count = sum(1 for n in sample_nodes if n.get('scamalytics_fraud_score') is not None)
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö 5 —É–∑–ª–æ–≤ –∏–∑ –±–∞–∑—ã:")
    for node in sample_nodes:
        has_scam = node.get('scamalytics_fraud_score') is not None
        scam_marker = "‚úÖ SCAM" if has_scam else "‚ö´ NO SCAM"
        print(f"  {node['ip']:18} - {node['state']:15} - {scam_marker}")
    
    print(f"\nüìä Scamalytics –≤ –±–∞–∑–µ: {scam_count}/5 —É–∑–ª–æ–≤ –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ")

print(f"\n{'='*100}")
print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
print(f"{'='*100}")
