#!/bin/bash
#
# üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNEXA - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
#

echo "================================================================================"
echo "üîç CONNEXA DIAGNOSTIC REPORT"
echo "================================================================================"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if [ -d "/opt/connexa" ]; then
    DIR="/opt/connexa"
elif [ -d "/app" ]; then
    DIR="/app"
else
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
fi

echo "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $DIR"
echo ""

# 1. –í–µ—Ä—Å–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo "================================================================================"
echo "1Ô∏è‚É£ –í–ï–†–°–ò–Ø –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
echo "================================================================================"
cd $DIR
echo "Git URL:"
git config --get remote.origin.url
echo ""
echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:"
git log -1 --oneline
echo ""
echo "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:"
git log -1 --format="%ai"
echo ""

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ server.py
echo "================================================================================"
echo "2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –§–£–ù–ö–¶–ò–ô –í BACKEND"
echo "================================================================================"

echo "–§—É–Ω–∫—Ü–∏—è parse_location_smart —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:"
grep -c "def parse_location_smart" $DIR/backend/server.py || echo "‚ùå –ù–ï–¢"

echo "–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏:"
grep -A5 "if ',' in inside_bracket:" $DIR/backend/server.py | head -6 || echo "‚ùå –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è"

echo ""
echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã get_nodes –≤–∫–ª—é—á–∞—é—Ç speed_min:"
grep "speed_min: Optional" $DIR/backend/server.py || echo "‚ùå –ù–ï–¢"

echo ""
echo "apply_node_filters_kwargs –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç speed_min:"
grep -A3 "if speed_min:" $DIR/backend/server.py | head -4 || echo "‚ùå –ù–ï–¢"

echo ""

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend –∏–º–ø–æ—Ä—Ç–æ–≤
echo "================================================================================"
echo "3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê FRONTEND –ò–ú–ü–û–†–¢–û–í"
echo "================================================================================"

echo "AdminPanel.js –∏–º–ø–æ—Ä—Ç—ã:"
head -15 $DIR/frontend/src/components/AdminPanel.js | grep "from.*components/ui" | head -3

echo ""
echo "NodesTable.js –∏–º–ø–æ—Ä—Ç—ã:"
head -15 $DIR/frontend/src/components/NodesTable.js | grep "from.*components/ui" | head -3

echo ""

# 4. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "================================================================================"
echo "4Ô∏è‚É£ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ù–ê –°–ï–†–í–ï–†–ï"
echo "================================================================================"

cd $DIR/backend

# –ò—Å–ø–æ–ª—å–∑—É–µ–º venv –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -d "venv" ]; then
    PYTHON="venv/bin/python3"
else
    PYTHON="python3"
fi

$PYTHON << 'PYEOF'
import sys
sys.path.insert(0, '.')

try:
    from server import parse_nodes_text
    
    # Test Format 1
    test1 = """
Ip: 71.84.237.32
Login: admin
Pass: admin
State: California
City: Pasadena
Zip: 91101
"""
    
    result = parse_nodes_text(test1)
    
    if result['nodes'] and len(result['nodes']) > 0:
        node = result['nodes'][0]
        print("Format 1 –ø–∞—Ä—Å–∏–Ω–≥:")
        print(f"  IP: {node.get('ip')}")
        print(f"  State: {node.get('state', 'NOT SET')}")
        print(f"  City: {node.get('city', 'NOT SET')}")
        print(f"  ZIP: {node.get('zipcode', 'NOT SET')}")
        
        if node.get('state') == 'California':
            print("  ‚úÖ Format 1 –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print("  ‚ùå Format 1 –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        
    # Test Scamalytics
    test2 = """
IP: 192.168.1.1
Credentials: admin:pass
Location: US (Washington, Mill Creek)
ZIP: 98012
Scamalytics Fraud Score: 45
Scamalytics Risk: medium
"""
    
    result2 = parse_nodes_text(test2)
    
    if result2['nodes'] and len(result2['nodes']) > 0:
        node2 = result2['nodes'][0]
        print("")
        print("Format 5 + Scamalytics:")
        print(f"  Country: {node2.get('country', 'NOT SET')}")
        print(f"  State: {node2.get('state', 'NOT SET')}")
        print(f"  City: {node2.get('city', 'NOT SET')}")
        print(f"  Fraud: {node2.get('scamalytics_fraud_score', 'NOT SET')}")
        print(f"  Risk: {node2.get('scamalytics_risk', 'NOT SET')}")
        
        if node2.get('city') == 'Mill Creek' and node2.get('scamalytics_fraud_score') == 45:
            print("  ‚úÖ Scamalytics –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print("  ‚ùå Scamalytics –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    import traceback
    traceback.print_exc()
PYEOF

echo ""

# 5. –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
echo "================================================================================"
echo "5Ô∏è‚É£ –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´"
echo "================================================================================"

$PYTHON << 'PYEOF'
import sqlite3

try:
    conn = sqlite3.connect('connexa.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM nodes')
    total = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM nodes WHERE state IS NOT NULL AND state != ""')
    with_state = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM nodes WHERE scamalytics_fraud_score IS NOT NULL')
    with_scam = cursor.fetchone()[0]
    
    print(f"–í—Å–µ–≥–æ —É–∑–ª–æ–≤: {total}")
    print(f"–°–æ State: {with_state} ({with_state/total*100:.1f}%)")
    print(f"–° Scamalytics: {with_scam} ({with_scam/total*100:.1f}%)")
    
    # –ü–µ—Ä–≤—ã–µ 3 —É–∑–ª–∞
    print("")
    print("–ü–µ—Ä–≤—ã–µ 3 —É–∑–ª–∞:")
    cursor.execute('SELECT ip, state, city, zipcode FROM nodes LIMIT 3')
    for ip, state, city, zipcode in cursor.fetchall():
        print(f"  {ip}: State={state or 'EMPTY'}, City={city or 'EMPTY'}, ZIP={zipcode or 'EMPTY'}")
    
    conn.close()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
PYEOF

echo ""

# 6. –õ–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞
echo "================================================================================"
echo "6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò BACKEND (–∏–º–ø–æ—Ä—Ç)"
echo "================================================================================"

if [ -f "/var/log/connexa-backend.out.log" ]; then
    grep -i "import\|parse\|format" /var/log/connexa-backend.out.log | tail -20
else
    echo "‚ö†Ô∏è  –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo ""
echo "================================================================================"
echo "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"
echo "================================================================================"
echo ""
echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –í–°–Å —á—Ç–æ –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
echo ""
