#!/usr/bin/env python3

import requests
import json
import time

# Configuration
BASE_URL = "https://memory-mcp.preview.emergentagent.com"
API_URL = f"{BASE_URL}/api"

def login():
    """Login and get token"""
    login_data = {"username": "admin", "password": "admin"}
    response = requests.post(f"{API_URL}/auth/login", json=login_data)
    
    if response.status_code == 200:
        token = response.json().get('access_token')
        print("‚úÖ Login successful")
        return token
    else:
        print(f"‚ùå Login failed: {response.text}")
        return None

def test_regular_import(token):
    """Test 1: Regular Import (small files <200KB)"""
    print("\nüî• –¢–ï–°–¢ 1: Regular Import (–º–∞–ª—ã–µ —Ñ–∞–π–ª—ã <200KB)")
    
    # Generate 50 lines of Format 7 (IP:Login:Pass)
    test_lines = []
    for i in range(50):
        test_lines.append(f"5.78.{i//256}.{i%256+1}:admin:pass{i}")
    
    test_data = "\n".join(test_lines)
    data_size = len(test_data.encode('utf-8'))
    
    print(f"üìä Test data: {len(test_lines)} lines, {data_size} bytes ({data_size/1024:.1f}KB)")
    
    import_data = {
        "data": test_data,
        "protocol": "pptp"
    }
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    response = requests.post(f"{API_URL}/nodes/import", json=import_data, headers=headers)
    
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            report = result.get('report', {})
            added = report.get('added', 0)
            skipped = report.get('skipped_duplicates', 0)
            errors = report.get('format_errors', 0)
            has_session_id = 'session_id' in result and result['session_id'] is not None
            
            print(f"‚úÖ SUCCESS: {added} added, {skipped} skipped, {errors} errors")
            print(f"   Session ID: {result.get('session_id', 'None')} (should be None for small files)")
            
            if not has_session_id and added > 0:
                print("‚úÖ PASSED: Regular processing (no session_id)")
                return True
            else:
                print("‚ùå FAILED: Expected regular processing")
                return False
        else:
            print(f"‚ùå FAILED: {result}")
            return False
    else:
        print(f"‚ùå FAILED: HTTP {response.status_code} - {response.text}")
        return False

def test_chunked_import(token):
    """Test 2: Chunked Import (large files >200KB)"""
    print("\nüî• –¢–ï–°–¢ 2: Chunked Import (–±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã >200KB)")
    
    # Generate 1000 lines of Format 7 to ensure >200KB
    test_lines = []
    for i in range(1000):
        ip_a = 10 + (i // 65536)
        ip_b = (i // 256) % 256
        ip_c = i % 256
        test_lines.append(f"{ip_a}.{ip_b}.{ip_c}.1:admin:pass{i}")
    
    test_data = "\n".join(test_lines)
    data_size = len(test_data.encode('utf-8'))
    
    print(f"üìä Test data: {len(test_lines)} lines, {data_size} bytes ({data_size/1024:.1f}KB)")
    
    import_data = {
        "data": test_data,
        "protocol": "pptp"
    }
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    response = requests.post(f"{API_URL}/nodes/import-chunked", json=import_data, headers=headers)
    
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            session_id = result.get('session_id')
            total_chunks = result.get('total_chunks', 0)
            progress_url = result.get('progress_url', '')
            
            print(f"‚úÖ SUCCESS: session_id={session_id}, total_chunks={total_chunks}")
            print(f"   Progress URL: {progress_url}")
            
            if session_id and total_chunks > 0:
                print("‚úÖ PASSED: Chunked processing started")
                return session_id
            else:
                print("‚ùå FAILED: Missing session_id or total_chunks")
                return None
        else:
            print(f"‚ùå FAILED: {result}")
            return None
    else:
        print(f"‚ùå FAILED: HTTP {response.status_code} - {response.text}")
        return None

def test_progress_tracking(token, session_id):
    """Test 3: Progress Tracking"""
    print("\nüî• –¢–ï–°–¢ 3: Progress Tracking")
    
    if not session_id:
        print("‚ùå FAILED: No session_id provided")
        return False
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    # Wait a moment for processing to start
    print("‚è≥ Waiting for processing to start...")
    time.sleep(3)
    
    response = requests.get(f"{API_URL}/import/progress/{session_id}", headers=headers)
    
    if response.status_code == 200:
        result = response.json()
        
        # Check for required progress fields
        required_fields = ['session_id', 'total_chunks', 'processed_chunks', 'status', 'added', 'skipped', 'errors']
        missing_fields = [field for field in required_fields if field not in result]
        
        if not missing_fields:
            status = result.get('status', 'unknown')
            processed_chunks = result.get('processed_chunks', 0)
            total_chunks = result.get('total_chunks', 0)
            added = result.get('added', 0)
            skipped = result.get('skipped', 0)
            errors = result.get('errors', 0)
            
            print(f"‚úÖ SUCCESS: status={status}, processed_chunks={processed_chunks}/{total_chunks}")
            print(f"   Statistics: added={added}, skipped={skipped}, errors={errors}")
            print("‚úÖ PASSED: Progress tracking working")
            return True
        else:
            print(f"‚ùå FAILED: Missing required fields: {missing_fields}")
            return False
    else:
        print(f"‚ùå FAILED: HTTP {response.status_code} - {response.text}")
        return False

def main():
    print("üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–º–ø–æ—Ä—Ç —É–∑–ª–æ–≤ —á–µ—Ä–µ–∑ API")
    print("=" * 80)
    print("–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∑–ª—ã –Ω–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä, –Ω–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª.")
    print("–¢–ï–°–¢–ò–†–£–ï–ú–´–ï –°–¶–ï–ù–ê–†–ò–ò:")
    print("1. Regular Import (–º–∞–ª—ã–µ —Ñ–∞–π–ª—ã <200KB) - POST /api/nodes/import")
    print("2. Chunked Import (–±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã >200KB) - POST /api/nodes/import-chunked")
    print("3. Progress Tracking - GET /api/import/progress/{session_id}")
    print("–§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•: Format 7 (IP:Login:Pass)")
    print("=" * 80)
    
    # Login
    token = login()
    if not token:
        print("‚ùå Cannot proceed without authentication")
        return False
    
    # Run tests
    test1_passed = test_regular_import(token)
    session_id = test_chunked_import(token)
    test2_passed = session_id is not None
    test3_passed = test_progress_tracking(token, session_id)
    
    # Summary
    print("\n" + "=" * 80)
    print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    tests_passed = sum([test1_passed, test2_passed, test3_passed])
    total_tests = 3
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({(tests_passed/total_tests)*100:.1f}%)")
    
    if test1_passed:
        print("‚úÖ –¢–ï–°–¢ 1: Regular Import - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–ï–°–¢ 1: Regular Import - –ù–ï –ü–†–û–ô–î–ï–ù")
    
    if test2_passed:
        print("‚úÖ –¢–ï–°–¢ 2: Chunked Import - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–ï–°–¢ 2: Chunked Import - –ù–ï –ü–†–û–ô–î–ï–ù")
    
    if test3_passed:
        print("‚úÖ –¢–ï–°–¢ 3: Progress Tracking - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–ï–°–¢ 3: Progress Tracking - –ù–ï –ü–†–û–ô–î–ï–ù")
    
    if tests_passed == total_tests:
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É–∑–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ –æ–±–∞ endpoint")
        return True
    else:
        print(f"\n‚ùå {total_tests - tests_passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)