#!/usr/bin/env python3
"""
COMPREHENSIVE Location parsing test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ñ–æ—Ä–º–∞—Ç–∞
"""
import sys
sys.path.insert(0, '/app/backend')

from server import parse_location_smart

# Test cases –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Location
test_cases = [
    {
        "name": "–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: Country (State, City) - –∑–∞–ø—è—Ç–∞—è –≤ —Å–∫–æ–±–∫–∞—Ö",
        "input": "US (Washington, Mill Creek)",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ï—Å–ª–∏ —É–±–µ—Ä—É—Ç –∑–∞–ø—è—Ç—É—é ‚Üí —Ç–æ—á–∫–∞: Country (State. City)",
        "input": "US (Washington. Mill Creek)",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ï—Å–ª–∏ –∑–∞–º–µ–Ω—è—Ç –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏–µ: Country (State: City)",
        "input": "US (Washington: Mill Creek)",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ï—Å–ª–∏ —É–±–µ—Ä—É—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: Country (State  City) - –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–±–µ–ª",
        "input": "US (Washington  Mill Creek)",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ï—Å–ª–∏ —É–±–µ—Ä—É—Ç —Å–∫–æ–±–∫–∏ –Ω–æ –æ—Å—Ç–∞–≤—è—Ç –∑–∞–ø—è—Ç—É—é: Country, State, City",
        "input": "US, Washington, Mill Creek",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ï—Å–ª–∏ –æ—Å—Ç–∞–≤—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã: Country State City",
        "input": "US Washington Mill Creek",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–ë–µ–∑ —Å—Ç—Ä–∞–Ω—ã (State, City) - –∑–∞–ø—è—Ç–∞—è",
        "input": "Washington, Mill Creek",
        "expected": (None, "Washington", "Mill Creek")
    },
    {
        "name": "–ë–µ–∑ —Å—Ç—Ä–∞–Ω—ã State (City) - —Å–∫–æ–±–∫–∏",
        "input": "Texas (Austin)",
        "expected": (None, "Texas", "Austin")
    },
    {
        "name": "–ë–µ–∑ —Å—Ç—Ä–∞–Ω—ã –∏ —Å–∫–æ–±–æ–∫: State City - –ø—Ä–æ–±–µ–ª",
        "input": "Washington Mill Creek",
        "expected": (None, "Washington", "Mill Creek")
    },
    {
        "name": "–ì–æ—Ä–æ–¥ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤: Country (State, Kansas City)",
        "input": "US (Missouri, Kansas City)",
        "expected": ("US", "Missouri", "Kansas City")
    },
    {
        "name": "–®—Ç–∞—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤: Country, New York, New York City",
        "input": "US, New York, New York City",
        "expected": ("US", "New York", "New York City")
    },
    {
        "name": "–¢–æ—á–∫–∏ –≤–µ–∑–¥–µ: Country. State. City",
        "input": "US. Washington. Mill Creek",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–î–≤–æ–µ—Ç–æ—á–∏—è –≤–µ–∑–¥–µ: Country: State: City",
        "input": "US: Washington: Mill Creek",
        "expected": ("US", "Washington", "Mill Creek")
    },
    {
        "name": "–û–¥–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ–±–µ–ª –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫: Country (State City)",
        "input": "US (Washington Mill Creek)",
        "expected": ("US", "Washington", "Mill Creek")
    },
]

print("=" * 100)
print("üß™ –¢–ï–°–¢ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ü–ê–†–°–ï–†–ê LOCATION –ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú –§–û–†–ú–ê–¢–ê")
print("=" * 100)

passed = 0
failed = 0

for i, test in enumerate(test_cases, 1):
    result = parse_location_smart(test['input'])
    
    country = result['country']
    state = result['state']
    city = result['city']
    
    exp_country, exp_state, exp_city = test['expected']
    
    country_match = country == exp_country
    state_match = state == exp_state
    city_match = city == exp_city
    
    all_match = country_match and state_match and city_match
    
    status = "‚úÖ PASSED" if all_match else "‚ùå FAILED"
    
    print(f"\n{'-'*100}")
    print(f"TEST {i}: {test['name']}")
    print(f"{'-'*100}")
    print(f"üìç Input: '{test['input']}'")
    print(f"\nüìä Expected ‚Üí Got:")
    print(f"  Country: {str(exp_country):20} ‚Üí {str(country):20} {'‚úÖ' if country_match else '‚ùå'}")
    print(f"  State:   {str(exp_state):20} ‚Üí {str(state):20} {'‚úÖ' if state_match else '‚ùå'}")
    print(f"  City:    {str(exp_city):20} ‚Üí {str(city):20} {'‚úÖ' if city_match else '‚ùå'}")
    print(f"\n{status}")
    
    if all_match:
        passed += 1
    else:
        failed += 1

# Summary
print(f"\n{'='*100}")
print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print(f"{'='*100}")
print(f"\n‚úÖ PASSED: {passed}/{len(test_cases)} tests ({passed/len(test_cases)*100:.1f}%)")
print(f"‚ùå FAILED: {failed}/{len(test_cases)} tests ({failed/len(test_cases)*100:.1f}%)")

if passed == len(test_cases):
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä Location –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–¢–û–ô–ß–ò–í –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º:")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —É–±–µ—Ä—É—Ç —Å–∫–æ–±–∫–∏")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –∑–∞–º–µ–Ω—è—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É/–¥–≤–æ–µ—Ç–æ—á–∏–µ/–ø—Ä–æ–±–µ–ª—ã")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ —à—Ç–∞—Ç–∞–º–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ Country/State/City")
    print("\nüõ°Ô∏è –ü–ê–†–°–ï–† –ì–û–¢–û–í –ö –õ–Æ–ë–´–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú –§–û–†–ú–ê–¢–ê!")
elif passed >= len(test_cases) * 0.9:
    print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ {passed/len(test_cases)*100:.0f}% —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("–ü–∞—Ä—Å–µ—Ä —É—Å—Ç–æ–π—á–∏–≤ –∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∞")
else:
    print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ {passed/len(test_cases)*100:.0f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ")
