"""
Service Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —á–µ–∫–µ—Ä–∞–º–∏
–í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import os
import logging

logger = logging.getLogger(__name__)

class ServiceManager:
    def __init__(self):
        self.active_geo_service = 'ip-api'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.active_fraud_service = 'ipqs'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def get_geolocation(self, ip: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        service = os.getenv('GEO_SERVICE', self.active_geo_service)
        
        try:
            if service == 'ip-api':
                from ip_geolocation import get_ip_geolocation
                result = await get_ip_geolocation(ip)
            elif service == 'ipapi.co':
                from ipapico_checker import ipapico_checker
                result = await ipapico_checker.get_geolocation(ip)
            elif service == 'ipinfo':
                from ipinfo_checker import ipinfo_checker
                result = await ipinfo_checker.get_geolocation(ip)
            elif service == 'maxmind':
                from maxmind_checker import maxmind_checker
                result = await maxmind_checker.get_geolocation(ip)
            else:
                # Fallback
                from ip_geolocation import get_ip_geolocation
                result = await get_ip_geolocation(ip)
            
            return result
        except Exception as e:
            logger.error(f"Geolocation service error: {e}")
            return {'success': False, 'error': str(e)}
    
    async def check_fraud(self, ip: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å fraud —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        service = os.getenv('FRAUD_SERVICE', self.active_fraud_service)
        
        try:
            if service == 'ipqs':
                from ipqs_checker import ipqs_checker
                result = await ipqs_checker.check_ip(ip)
            elif service == 'abuseipdb':
                from abuseipdb_checker import abuseipdb_checker
                result = await abuseipdb_checker.check_ip(ip)
            else:
                # Fallback
                from ipqs_checker import ipqs_checker
                result = await ipqs_checker.check_ip(ip)
            
            return result
        except Exception as e:
            logger.error(f"Fraud service error: {e}")
            return {'success': False, 'error': str(e)}
    
    async def enrich_node_complete(self, node, db_session):
        """
        –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±–æ–≥–∞—Ç–∏—Ç—å —É–∑–µ–ª –í–°–ï–ú–ò –¥–∞–Ω–Ω—ã–º–∏ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        1. –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å (ipqs, abuseipdb –∏ —Ç.–¥.)
        2. –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Üí –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (ip-api.com, ipapi.co)
        """
        fraud_service = os.getenv('FRAUD_SERVICE', self.active_fraud_service)
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π fraud —Å–µ—Ä–≤–∏—Å
        logger.info(f"üéØ Checking {node.ip} with {fraud_service}")
        
        try:
            fraud_result = await self.check_fraud(node.ip)
            
            if fraud_result.get('success'):
                # –ó–∞–ø–æ–ª–Ω–∏—Ç—å fraud –¥–∞–Ω–Ω—ã–µ
                if node.scamalytics_fraud_score is None:
                    node.scamalytics_fraud_score = fraud_result.get('fraud_score', 0)
                if node.scamalytics_risk is None:
                    node.scamalytics_risk = fraud_result.get('risk_level', 'low')
                
                # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≥–µ–æ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if not node.country and fraud_result.get('country'):
                    from country_normalize import normalize_country
                    node.country = normalize_country(fraud_result['country'])
                if not node.state and fraud_result.get('region'):
                    node.state = fraud_result['region']
                if not node.city and fraud_result.get('city'):
                    node.city = fraud_result['city']
                if not node.zipcode and fraud_result.get('zipcode'):
                    zip_val = fraud_result['zipcode']
                    if zip_val not in ['N/A', 'NA', 'Unknown']:
                        node.zipcode = zip_val
                if not node.provider and fraud_result.get('isp'):
                    node.provider = fraud_result['isp']
                
                logger.info(f"‚úÖ {fraud_service}: fraud={node.scamalytics_fraud_score}, city={node.city}")
        except Exception as e:
            logger.error(f"{fraud_service} error: {e}")
        
        # –®–∞–≥ 2: –î–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ì–ï–û –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ë–ï–°–ü–õ–ê–¢–ù–´–ï —Å–µ—Ä–≤–∏—Å—ã
        needs_geo = not node.city or not node.state or not node.zipcode or not node.provider
        
        if needs_geo:
            logger.info(f"üìç {node.ip}: –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≥–µ–æ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–æ—Å –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: ip-api.com
            try:
                from ip_geolocation import get_ip_geolocation
                geo_result = await get_ip_geolocation(node.ip)
                
                if geo_result.get('success'):
                    if not node.country:
                        from country_normalize import normalize_country
                        node.country = normalize_country(geo_result.get('country', ''))
                    if not node.state:
                        node.state = geo_result.get('state', '')
                    if not node.city:
                        node.city = geo_result.get('city', '')
                    if not node.zipcode:
                        node.zipcode = geo_result.get('zipcode', '')
                    if not node.provider:
                        node.provider = geo_result.get('provider', '')
                    
                    logger.info(f"‚úÖ ip-api.com: city={node.city}, zip={node.zipcode}")
            except Exception as e:
                logger.debug(f"ip-api.com error: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Üí ipapi.co
            still_needs = not node.city or not node.state or not node.zipcode
            
            if still_needs:
                try:
                    from ipapico_checker import ipapico_checker
                    geo2_result = await ipapico_checker.get_geolocation(node.ip)
                    
                    if geo2_result.get('success'):
                        if not node.city:
                            node.city = geo2_result.get('city', '')
                        if not node.state:
                            node.state = geo2_result.get('state', '')
                        if not node.zipcode:
                            node.zipcode = geo2_result.get('zipcode', '')
                        
                        logger.info(f"‚úÖ ipapi.co: city={node.city}")
                except Exception as e:
                    logger.debug(f"ipapi.co error: {e}")
        
        return True
    
    async def enrich_node_geolocation(self, node, db_session, force=False):
        """–û–±–æ–≥–∞—Ç–∏—Ç—å —É–∑–µ–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        
        Args:
            node: Node –æ–±—ä–µ–∫—Ç
            db_session: Database session
            force: –ï—Å–ª–∏ True - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï–ì–î–ê, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        """
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        needs_geo = force or (not node.city or not node.state or not node.zipcode)
        
        if not needs_geo:
            return False
        
        result = await self.get_geolocation(node.ip)
        
        if result.get('success'):
            # –ü—Ä–∏ force=True - –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if force or not node.country:
                node.country = result.get('country', '')
            if force or not node.state:
                node.state = result.get('state', '')
            if force or not node.city:
                node.city = result.get('city', '')
            if force or not node.zipcode:
                node.zipcode = result.get('zipcode', '')
            if force or not node.provider:
                node.provider = result.get('provider', '')
            return True
        return False
    
    async def enrich_node_fraud(self, node, db_session, force=False):
        """–û–±–æ–≥–∞—Ç–∏—Ç—å —É–∑–µ–ª fraud –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            node: Node –æ–±—ä–µ–∫—Ç
            db_session: Database session
            force: –ï—Å–ª–∏ True - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï–ì–î–ê, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        """
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        needs_fraud = force or (node.scamalytics_fraud_score is None or node.scamalytics_risk is None)
        
        if not needs_fraud:
            return False
        
        result = await self.check_fraud(node.ip)
        
        if result.get('success'):
            # –ü—Ä–∏ force=True - –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º
            if force or node.scamalytics_fraud_score is None:
                node.scamalytics_fraud_score = result.get('fraud_score', 0)
            if force or node.scamalytics_risk is None:
                node.scamalytics_risk = result.get('risk_level', 'low')
            return True
        return False

service_manager = ServiceManager()
